{"ast":null,"code":"var _jsxFileName = \"F:\\\\project\\\\apple_pay\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { PaymentElement, Elements, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (elements == null) {\n      return;\n    }\n\n    // Trigger form validation and wallet collection\n    const {\n      error: submitError\n    } = await elements.submit();\n    if (submitError) {\n      // Show error to your customer\n      setErrorMessage(submitError.message);\n      return;\n    }\n\n    // Create the PaymentIntent and obtain clientSecret from your server endpoint\n    const res = await fetch('/create-intent', {\n      method: 'POST'\n    });\n    const {\n      client_secret: clientSecret\n    } = {\n      client_secret: \"sk_test_aediX53shAzQkRvioEKu6CXV\"\n    };\n    console.log(clientSecret);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      clientSecret: \"sk_test_aediX53shAzQkRvioEKu6CXV\",\n      confirmParams: {\n        return_url: 'http://localhost:3000/'\n      }\n    });\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Show error to your customer (for example, payment\n      // details incomplete)\n      setErrorMessage(error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe || !elements,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\n_s(CheckoutForm, \"h4FiSkOun1ZNv/ijUbXQxJX1xVI=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nconst stripePromise = loadStripe('pk_test_W3AWlvrzo3jtQnDsKtyCGCUS');\nfunction App() {\n  const options = {\n    // passing the client secret obtained from the server\n    // clientSecret: `sk_test_aediX53shAzQkRvioEKu6CXV`\n    mode: \"payment\",\n    amount: 1099,\n    currency: \"usd\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(Elements, {\n        stripe: stripePromise,\n        options: options,\n        children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","logo","loadStripe","PaymentElement","Elements","useStripe","useElements","jsxDEV","_jsxDEV","CheckoutForm","_s","stripe","elements","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","error","submitError","submit","message","res","fetch","method","client_secret","clientSecret","console","log","confirmPayment","confirmParams","return_url","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","stripePromise","App","options","mode","amount","currency","className","_c2","$RefreshReg$"],"sources":["F:/project/apple_pay/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {loadStripe} from '@stripe/stripe-js';\nimport {\n  PaymentElement,\n  Elements,\n  useStripe,\n  useElements,\n} from '@stripe/react-stripe-js';\n\n\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (elements == null) {\n      return;\n    }\n\n    // Trigger form validation and wallet collection\n    const {error: submitError} = await elements.submit();\n    if (submitError) {\n      // Show error to your customer\n      setErrorMessage(submitError.message);\n      return;\n    }\n\n    // Create the PaymentIntent and obtain clientSecret from your server endpoint\n    const res = await fetch('/create-intent', {\n      method: 'POST',\n    });\n\n    const {client_secret: clientSecret} = {client_secret: \"sk_test_aediX53shAzQkRvioEKu6CXV\"}\n\n    console.log(clientSecret)\n\n    const {error} = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      clientSecret: \"sk_test_aediX53shAzQkRvioEKu6CXV\",\n      confirmParams: {\n        return_url: 'http://localhost:3000/',\n      },\n    });\n\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Show error to your customer (for example, payment\n      // details incomplete)\n      setErrorMessage(error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button type=\"submit\" disabled={!stripe || !elements}>\n        Pay\n      </button>\n      {/* Show error message to your customers */}\n      {errorMessage && <div>{errorMessage}</div>}\n    </form>\n  );\n};\n\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe('pk_test_W3AWlvrzo3jtQnDsKtyCGCUS');\n\n\nfunction App() {\n\n  const options = {\n    // passing the client secret obtained from the server\n    // clientSecret: `sk_test_aediX53shAzQkRvioEKu6CXV`\n    mode: \"payment\",\n    amount: 1099,\n    currency: \"usd\"\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Elements stripe={stripePromise} options={options}>\n          <CheckoutForm />\n        </Elements>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}